import { useEffect, useRef } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { useAuthStore } from "../stores/authStore";
import { useUserStore } from "../stores/userStore";
import { useModalStore } from "../stores/useModal";
import axios from "axios";
import { handleAllowNotification } from "../utils/firebase/notificationPermission";
import LoadingSpinner from "../components/common/LoadingSpinner";

const VITE_BACKEND_URL = import.meta.env.VITE_BACKEND_URL;

export default function OAuthCallback() {
  const location = useLocation();
  const navigate = useNavigate();
  const { setTokens } = useAuthStore();
  const { setUser } = useUserStore();
  const { openModal } = useModalStore();
  const hasProcessed = useRef(false);

  useEffect(() => {
    if (hasProcessed.current) return;
    hasProcessed.current = true;
    const params = new URLSearchParams(location.search);
    const code = params.get("code");

    if (!code) {
      navigate("/", { replace: true });
      return;
    }

    let provider = "";
    if (location.pathname.includes("google")) provider = "google";
    else if (location.pathname.includes("kakao")) provider = "kakao";

    if (!provider) {
      navigate("/", { replace: true });
      return;
    }

    const apiUrl = `${VITE_BACKEND_URL}/login/oauth2/callback?code=${encodeURIComponent(
      code
    )}&provider=${provider}`;

    axios
      .post(apiUrl, null, {
        headers: {
          "Content-Type": "application/json",
          Accept: "application/json",
        },
      })
      .then(async (res) => {
        console.log("로그인 성공", res.data);

        const { accessToken, refreshToken, nickname, imgUrl, userId, role } =
          res.data.data;

        if (!userId) {
          navigate("/", { replace: true });
          return;
        }

        const isAutoGeneratedNickname = /^(GOOGLE|KAKAO)_.+$/.test(
          nickname.trim()
        );

        setTokens(accessToken, refreshToken, isAutoGeneratedNickname);
        setUser({ userId, nickname, profileUrl: imgUrl, role });
        handleAllowNotification(userId);
        if (isAutoGeneratedNickname) {
          navigate(`/signup/${userId}`, { replace: true });
        } else {
          navigate("/main", { replace: true });
        }
      })
      .catch((err) => {
        console.error(err);
        let errorMessage = "로그인 중 오류가 발생했습니다.";
        if (err.response) {
          console.error("서버 응답 데이터:", err.response.data);
          console.error("서버 응답 코드:", err.response.status);
          errorMessage = err.response.data?.message || errorMessage;
        }
        if (errorMessage.length > 30) {
          errorMessage = errorMessage.replace(/([.?!])\s+/g, "$1\n");
        }
        openModal(errorMessage);
        navigate("/", { replace: true });
      });
  }, [location.search]);

  return (
    <div>
      <LoadingSpinner />
    </div>
  );
}
